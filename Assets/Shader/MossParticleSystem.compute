#pragma kernel CSMain  // カーネル関数を指定
//#pragma kernel Init
//#pragma kernel Emit
//#pragma kernel Update

#define NUM_THREAD_X 32 // スレッド数 X成分
#define NUM_THREAD_Y 1 // スレッド数 Y成分
#define NUM_THREAD_Z 1 // スレッド数 Z成分

#define PI 3.14159265


// パーティクルデータの構造体
struct ParticleData
{
	float3 position; // 位置
	int isActive;
	float4 color;
	//float randomValue;
	//float duration;
	//float scale;
};

// 定数バッファ
cbuffer CB
{
	float3 _AreaSize;  // パーティクルが存在するエリアの大きさ
	float3 _RenderTexture; // RenderTextureのサイズ用
	float _TimeStep;  // タイムステップ
	float _Time; // パーティクル初期化時の乱数用
	float _BloomTime;
	//float _DT;
	//float _LifeTime;
}
// 読み込み書き込みが可能なパーティクルデータを格納するバッファ
RWStructuredBuffer<ParticleData> _ParticleBuffer;
//AppendStructuredBuffer<uint> _DeadList;
//ConsumeStructuredBuffer<int> _ParticlePool;

//VectorGrid RGBA
Texture2D<float4> VectorGrid;

// 乱数(0.0~1.0)を返す関数
float rand(float2 co)
{
	return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}

// 半径1の球体の内部のランダムな点
float3 randomInsideUnitSphere(float2 co)
{

	float phi = 2 * PI * rand(co);
	float th = acos(1.0 - 2.0 * rand(co + float2(0.0, 0.1)));
	float r = pow(rand(co + float2(0.0, 0.2)), 0.333333333);

	float x = r * sin(th) * cos(phi);
	float y = r * sin(th) * sin(phi);
	float z = r * cos(th);

	return float3(x, y, z);
}

// ------------------------------------------------------------------
// カーネル関数
// ------------------------------------------------------------------
// スレッド数を設定

float _StartTime = 0.0;

[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void CSMain(uint3 Gid  : SV_GroupID,
	uint3 GTid : SV_GroupThreadID,
	uint3 DTid : SV_DispatchThreadID,
	uint  GI : SV_GroupIndex)
{
	// パーティクルのインデックス
	int idx = DTid.x;
	// パーティクルの位置を読み込み
	float3 position = _ParticleBuffer[idx].position;
	int isActive = _ParticleBuffer[idx].isActive;

	//加速度をrenderTextureから計算
	uint2 index = uint2(((position.x + _AreaSize.x / 2) / _AreaSize.x) * _RenderTexture.x, ((position.z + _AreaSize.z / 2) / _AreaSize.z) * _RenderTexture.y);
	float4 color = float4(VectorGrid[index].r, VectorGrid[index].g, VectorGrid[index].b, VectorGrid[index].a);
	
	if (color.a < 1.0) {
		_ParticleBuffer[idx].color.a = 1.0;
	}
	else {
		_ParticleBuffer[idx].color.a = 0.0;
	}
	//_ParticleBuffer[idx].color.r = rand(float2(_Time, idx));
	/*
	if (isActive < 0) {
		//if (_ParticleBuffer[idx].color.a <= 0.0) {
		if (color.a > 0.0) {
			_StartTime = _Time;
		}
		else{
			//_ParticleBuffer[idx].color.a = (_Time - _StartTime) / _BloomTime;
			_ParticleBuffer[idx].color.a = 1.0;
			if (_ParticleBuffer[idx].color.a >= 1.0) {
				isActive = 1;
			}
		}
	}
	else {
		//if (_ParticleBuffer[idx].color.a >= 0.0) {
		if (color.a <= 0.0) {
			_StartTime = _Time;
		}
		else {
			//_ParticleBuffer[idx].color.a = 1.0 - (_Time - _StartTime) / _BloomTime;
			_ParticleBuffer[idx].color.a = 0.0;
			if (_ParticleBuffer[idx].color.a <= 1.0) {
				isActive = -1;
			}
		}
	}
	*/

	/*
	// パーティクルがエリアの外にあるかどうか
	if (position.x < -_AreaSize.x * 0.5 || position.x > _AreaSize.x * 0.5 ||
		position.y < -_AreaSize.y * 0.5 || position.y > _AreaSize.y * 0.5 ||
		position.z < -_AreaSize.z * 0.5 || position.z > _AreaSize.z * 0.5 ||
		color.a > 0.01)
	{
		// 速度と位置を初期化
		float3 rnd = randomInsideUnitSphere(float2(idx, 0));
		position.x = rand(float2(_Time, idx)) * 3.6 - 1.8;
		position.z = rand(float2(idx, _Time)) * 2.0 - 1.0;
		position.y = 0.0;
	}*/

	// 速度と位置をバッファに書き込み
	_ParticleBuffer[idx].position = position;
	_ParticleBuffer[idx].isActive = isActive;
	//_ParticleBuffer[idx].color = color;
	//_ParticleBuffer[idx].randomValue = rand(float2(_Time, idx));
}


/*
[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Init(uint id : SV_DispatchThreadID) {
	uint no = id.x;

	float2 seed = float2(no + _Time, no + 1.583 + _Time);
	float3 position = float3(rand(seed) * 3.6 - 1.8, 0.0, rand(seed + 5) * 2.0 - 1.0);

	_ParticleBuffer[no].isActive = false;
	_DeadList.Append(no);
}

[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Emit()
{
	uint no = _ParticlePool.Consume(); // 未使用リスト(ConsumeStructuredBuffer)の末尾から未使用パーティクルのインデックスを取得

	float2 seed = float2(no + _Time, no + 1.583 + _Time);
	float scale = (rand(seed + 3) - 0.5) * 2.0 * (_ScaleMax - _ScaleMin) + _ScaleMin;
	float h = rand(seed + 5);    // color

	_Particles[no].isActive = true; // 有効にする
	_Particles[no].position = float3(rand(seed) * 3.6 - 1.8, 0.0, rand(seed + 5) * 2.0 - 1.0);
	//_Particles[no].color = float4(hsv_to_rgb(float3(h, _Sai, _Val)), 1);
	_Particles[no].duration = _LifeTime;
	_Particles[no].scale = scale;
}

[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Update(uint3 id : SV_DispatchThreadID)
{
	uint no = id.x;

	// 有効フラグが立っているものだけ処理
	if (_Particles[no].isActive) {
		_Particles[no].duration -= _DT;
		_Particles[no].color.a = max(_Particles[no].duration / _LifeTime, 0);
		if (_Particles[no].duration <= 0) {
			_Particles[no].isActive = false;
			_DeadList.Append(no); // 寿命が付きたら未使用リストに追加
		}
	}

}*/