#pragma kernel CSMain  // カーネル関数を指定

#define NUM_THREAD_X 32 // スレッド数 X成分
#define NUM_THREAD_Y 1 // スレッド数 Y成分
#define NUM_THREAD_Z 1 // スレッド数 Z成分

#define PI 3.14159265


// パーティクルデータの構造体
struct ParticleData
{
	float3 velocity; // 速度
	float3 position; // 位置
	float mass; // 質量
	float4 color;
	//float radius; //半径
};

// 定数バッファ
cbuffer CB
{
	float3 _Gravity;   // 重力
	float3 _AreaSize;  // パーティクルが存在するエリアの大きさ
	float3 _RenderTexture; // RenderTextureのサイズ用
	float _TimeStep;  // タイムステップ
	float _Time; // パーティクル初期化時の乱数用
	float _MaxSpeed;
	float _MassMax;
	float _MassMin;
}
// 読み込み書き込みが可能なパーティクルデータを格納するバッファ
RWStructuredBuffer<ParticleData> _ParticleBuffer;

//VectorGrid RGBA
Texture2D<float4> VectorGrid;

// 乱数(0.0~1.0)を返す関数
float rand(float2 co)
{
    return frac(sin(dot(co.xy, float2(12.9898,78.233))) * 43758.5453);
}

// 半径1の球体の内部のランダムな点
float3 randomInsideUnitSphere (float2 co)
{  
	
	float phi = 2 * PI * rand(co);
	float th  = acos(1.0 - 2.0 * rand(co + float2(0.0, 0.1)));
	float r   = pow(rand(co + float2(0.0, 0.2)), 0.333333333);
  
	float x = r * sin(th) * cos(phi);
	float y = r * sin(th) * sin(phi);
	float z = r * cos(th);

	return float3(x, y, z);
}

// ------------------------------------------------------------------
// カーネル関数
// ------------------------------------------------------------------
// スレッド数を設定
[numthreads(NUM_THREAD_X,NUM_THREAD_Y,NUM_THREAD_Z)]
void CSMain ( uint3 Gid  : SV_GroupID,
              uint3 GTid : SV_GroupThreadID,
              uint3 DTid : SV_DispatchThreadID,
			  uint  GI   : SV_GroupIndex )
{
	// パーティクルのインデックス
	int idx = DTid.x;
	// パーティクルの速度を読み込み
	float3 velocity = float3(_ParticleBuffer[idx].velocity.x, 0, _ParticleBuffer[idx].velocity.z);
	// パーティクルの位置を読み込み
	float3 position = _ParticleBuffer[idx].position;
	// パーティクルの質量を読み込み
	float mass = _ParticleBuffer[idx].mass;

	//加速度をrenderTextureから計算
	uint2 index = uint2(((position.x + _AreaSize.x / 2) / _AreaSize.x) * _RenderTexture.x, ((position.z + _AreaSize.z / 2) / _AreaSize.z) * _RenderTexture.y);
	float4 color = float4(VectorGrid[index].r, VectorGrid[index].g, VectorGrid[index].b, VectorGrid[index].a);
	float3 acceleration = float3((color.x/mass), 0, (color.z/mass));
	
	// 速度を計算
	//velocity += float3(acceleration.x * _TimeStep, 0, acceleration.z * _TimeStep);
	if (VectorGrid[index].y > 0) {
		velocity.x *= VectorGrid[index].y;
		velocity.z *= VectorGrid[index].y;
	}

	velocity += float3(acceleration.x * _TimeStep, 0, acceleration.z * _TimeStep);

	//Limit
	if (_MaxSpeed < length(velocity)) {
		velocity = normalize(velocity) * _MaxSpeed;
	}

	// 位置を計算
	position += float3(velocity.x * _TimeStep, 0, velocity.z * _TimeStep);
	
	// パーティクルがエリアの外にあるかどうか
	if(position.x < -_AreaSize.x * 0.5 || position.x > _AreaSize.x * 0.5 ||
	   position.y < -_AreaSize.y * 0.5 || position.y > _AreaSize.y * 0.5 ||
	   position.z < -_AreaSize.z * 0.5 || position.z > _AreaSize.z * 0.5 )
	{
		// 速度と位置を初期化
		float3 rnd = randomInsideUnitSphere(float2(idx,0));
		velocity.x = -rand(float2(_Time, idx)) * 0.5;
		velocity.y = 0.0f;
		velocity.z = 0.0f;
		position.x = _AreaSize.x / 2;
		//position.x = rand(float2(_Time, idx)) * _AreaSize.x - _AreaSize.x / 2;
		position.z = rand(float2(idx, _Time)) * 2.0 - 1.0;
		position.y = 0.0f;
		mass = rand(float2(_Time, idx)) * _MassMax + _MassMin;
	}

	if (color.a < 1.0) {
		_ParticleBuffer[idx].color.a = 1.0;
	}
	else {
		_ParticleBuffer[idx].color.a = 0.0;
	}

	// 速度と位置をバッファに書き込み
	_ParticleBuffer[idx].velocity = velocity;
	_ParticleBuffer[idx].position = position;
}
