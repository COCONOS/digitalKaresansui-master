// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define PI 3.14159265
#define THREAD_X 128
#define THREAD_Y 1
#define THREAD_Z 1
#define EPSILON 1e-3

#include "SimplexNoise3D.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// 波紋データの構造体
struct CircleData
{
	int isActive;
	float3 position; // 位置
	float radius; // 半径
	float startTime; // 継続時間
};

StructuredBuffer<CircleData> _CircleBuffer;

cbuffer CB
{
	float  _TimeStep;  // タイムステップ
	float _Time;
	float _TimeScale;
	int _NUM_CIRCLES;

	float3 _CenterPos; //円形波紋の中心座標
	//float _CircleSize; //円形波紋の半径
	float _CircleWaveFreq; //波紋の細かさ
	float _CircleFreqOffset; //波紋のオフセット
	//float _CirclePower;
	float _CirclePowerMax;
	float _CirclePowerMin;
	float _WaveFreq; // 波の細かさ

	float _FlowIntensity; // X方向の流れの強さ
	float _StripeIntensity; // 縞模様の強さ

	float _NoiseScale; // ノイズのスケール
	float _NoiseIntensity; // ノイズの強さ

	float2 Mouse; // マウスポジション

	float _Player1PosX;
	float _Player1PosY;

	float2 staticMossCenter;
	float staticMossRadius;
}

float sdCircle(float2 p, float r)
{
	return length(p) - r;
}

float opSmoothUnion(float d1, float d2, float k) {
	float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);
	return lerp(d2, d1, h) - k * h * (1.0 - h);
}

float cubicOut(float t) {
	float f = t - 1.0;
	float value;
	if(t < 1)
	{
		value = f * f * f + 1.0;
	}
	else
	{
		value = 1.0;
	}
	return value;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!

	float3 f = float3(0, 0, 0);
	float alpha = 1.0;

	int idx = 0;
	float2 center = float2(0,0);
	float radius = 0;
	float mossRadius = 0;
	float maxRadius;

	float2 nearestCirclePos; //tmp
	float nearestCircleRadius = 99999999; //tmp
	float nearestMossCircleRadius = 99999999;
	float nearestStaticMossCircleRadius = 99999999;

	float2 pos;
	float2 diff; // 差分
	float distance; //　中心との距離
	float2 dir;

	float2 staticMossDiff;
	float staticMossDistance;
	float2 staticMossDir;
	
	//横方向のふるまい
	//f.x += -_FlowIntensity;

	int nearestCircleIndex = 0;
	pos = id.xy;

	// 円形波紋
	[loop]
	for (int i = 0; i < 10; i++) {

		//if (_CircleBuffer[i].isActive > 0){
		if (_CircleBuffer[i].isActive > 0/* && _CircleBuffer[i+1].isActive > 0 && length(_CircleBuffer[i].position - _CircleBuffer[i+1].position) < 240.0*/) { //PUCs ver.
			// 波紋の位置を読み込み
			center = float2(_CircleBuffer[i].position.x, _CircleBuffer[i].position.z);
			//center = float2((_CircleBuffer[i].position.x + _CircleBuffer[i + 1].position.x) / 2, (_CircleBuffer[i].position.z + _CircleBuffer[i + 1].position.z) / 2);//PUCs ver.

			maxRadius = _CircleBuffer[i].radius;
			radius = cubicOut((_Time - _CircleBuffer[i].startTime) * 0.02/*0.02*/) * maxRadius;
			mossRadius = 0;
			float delay = 30;
			if (_Time - _CircleBuffer[i].startTime - delay > 0) {
				mossRadius = cubicOut((_Time - _CircleBuffer[i].startTime - delay) * 0.02/*0.02*/) * maxRadius;
			}

			diff = (pos - center);
			distance = length(diff);
			dir = distance > 0 ? normalize(diff) : float2(0, 0);

			nearestCircleRadius = opSmoothUnion(nearestCircleRadius, sdCircle(center - pos, radius), 0.1 * 1080);
			nearestMossCircleRadius = opSmoothUnion(nearestMossCircleRadius, sdCircle(center - pos, mossRadius * 0.4), 0.1 * 1080);

		}
		else {

		}
		
	}

	[loop]
	for (int j = 0; j < 4; j++) {
		if (j == 0) {
			staticMossDiff = (pos - float2(1900, -580));
			staticMossDistance = length(staticMossDiff);
			staticMossDir = staticMossDistance > 0 ? normalize(staticMossDiff) : float2(0, 0);

			nearestCircleRadius = opSmoothUnion(nearestCircleRadius, sdCircle(float2(1900, -580) - pos, 872 + 30), 0.1 * 1080);
			nearestStaticMossCircleRadius = opSmoothUnion(nearestStaticMossCircleRadius, sdCircle(float2(1900, -580) - pos, 872), 0.1 * 1080);
		}
		else if (j == 1) {
			staticMossDiff = (pos - float2(1337, -152));
			staticMossDistance = length(staticMossDiff);
			staticMossDir = staticMossDistance > 0 ? normalize(staticMossDiff) : float2(0, 0);

			nearestCircleRadius = opSmoothUnion(nearestCircleRadius, sdCircle(float2(1337, -152) - pos, 318 + 30), 0.1 * 1080);
			nearestStaticMossCircleRadius = opSmoothUnion(nearestStaticMossCircleRadius, sdCircle(float2(1337, -152) - pos, 318), 0.1 * 1080);
		}
		else if (j == 2) {
			staticMossDiff = (pos - float2(57, 1152));
			staticMossDistance = length(staticMossDiff);
			staticMossDir = staticMossDistance > 0 ? normalize(staticMossDiff) : float2(0, 0);

			nearestCircleRadius = opSmoothUnion(nearestCircleRadius, sdCircle(float2(57, 1152) - pos, 229 + 30), 0.1 * 1080);
			nearestStaticMossCircleRadius = opSmoothUnion(nearestStaticMossCircleRadius, sdCircle(float2(57, 1152) - pos, 229), 0.1 * 1080);
		}
		else if (j == 3) {
			staticMossDiff = (pos - float2(362, 1089));
			staticMossDistance = length(staticMossDiff);
			staticMossDir = staticMossDistance > 0 ? normalize(staticMossDiff) : float2(0, 0);

			nearestCircleRadius = opSmoothUnion(nearestCircleRadius, sdCircle(float2(362, 1089) - pos, 101 + 30), 0.1 * 1080);
			nearestStaticMossCircleRadius = opSmoothUnion(nearestStaticMossCircleRadius, sdCircle(float2(362, 1089) - pos, 101), 0.1 * 1080);
		}
		
	}
	//-----
	//staticMossDiff = (pos - staticMossCenter);
	//staticMossDistance = length(staticMossDiff);
	//staticMossDir = staticMossDistance > 0 ? normalize(staticMossDiff) : float2(0, 0);

	//nearestStaticMossCircleRadius = opSmoothUnion(nearestMossCircleRadius, sdCircle(staticMossCenter - pos, staticMossRadius), 0.1 * 1080);

	//Simplex Noise
	float3 sNoiseX = float3((float)id.x * _NoiseScale, (float)id.y * _NoiseScale, _Time * _TimeScale);
	float3 sNoiseY = float3((float)id.y * _NoiseScale, (float)id.x * _NoiseScale, _Time * _TimeScale);
	
	//nearestCirclePos = float2(_CircleBuffer[nearestCircleIndex].position.x, _CircleBuffer[nearestCircleIndex].position.z);

	//if (length(nearestCirclePos - pos) < _CircleBuffer[nearestCircleIndex].radius) {
	if(nearestCircleRadius <= 0.0/* && nearestMossCircleRadius > 0.0*/)//緑の中、つまり波紋上
	{
		float circlePower = ((_CirclePowerMax - _CirclePowerMin) / 2) * sin(nearestCircleRadius * _CircleWaveFreq + _CircleFreqOffset) + ((_CirclePowerMax + _CirclePowerMin) / 2);
		f.y = circlePower;
		
		f.x += -0.1;
		float3 sNoiseY2 = float3((float)id.y * 1, (float)id.x * 1, _Time * _TimeScale); //１はノイズスケール
		f.z += simplexNoise(sNoiseY2) * 0.1; //ここら辺の値を
	}
	else {
		//横縞模様
		f.z = _StripeIntensity * sin((float)(id.y * PI * 2 * _WaveFreq / 108));

		//f.x = -(abs(simplexNoise(sNoiseX)) + 0.1) * _NoiseIntensity;
		f.x = -abs(simplexNoise(sNoiseX)) * _NoiseIntensity + _FlowIntensity + -0.03; //ここら辺の値を
		f.z += simplexNoise(sNoiseY) * _NoiseIntensity * 0.25;
	}

	if (nearestMossCircleRadius <= 0.0) {
		//f.x = 0.5;
		//f.y = 1.0;
		//f.z = 0.5;
		alpha = 0.0;
	}

	if (nearestStaticMossCircleRadius <= 0.0) {
		//f.x = 0.5;
		//f.y = 1.0;
		//f.z = 0.5;
		alpha = 0.0;
	}

	if (length(pos - float2(_Player1PosX, _Player1PosY)) < 10.0) {
		f.x = 1.0;
	}

	Result[id.xy] = float4(f.x, f.y, f.z, alpha);

}